import discord
import psutil
import datetime
import requests

import config

from discord.ext import commands
from discord import utils
from config import mat
from bs4 import BeautifulSoup as BS

bot = commands.Bot(command_prefix='!', intents=discord.Intents.all())

Year = int(datetime.datetime.now().strftime("%Y"))
Mounth = datetime.datetime.now().strftime("%B")
Dey = int(datetime.datetime.now().strftime("%d"))
Hour = int(datetime.datetime.now().strftime("%H"))
Minute = datetime.datetime.now().strftime("%M")
Dates = [Dey, Hour, Minute, Mounth, Year]
date = f"{Dates[4]}y {Dates[3]} {Dates[0]} {Dates[1]}:{Dates[2]}"

def cpu ():
  cpu_per = int (psutil.cpu_percent (1))
  return cpu_per

@bot.event
async def on_ready():
    print("<<<START>>>")
    print("{0.user} is now online!".format(bot))

@bot.event
async def on_member_join(member: discord.Member):
    channel = bot.get_channel(1008101806624215121)
    embed = discord.Embed(title=f'–£ –Ω–∞—Å –Ω–æ–≤–µ–Ω—å–∫–∏–µ!', description=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!\n\n–ü—Ä–∏–≤–µ—Ç {member.mention}, –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –°–æ–æ–±—â–µ—Å—Ç–æ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤\n–í –µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Ç–∏ –º–æ–∂–µ–∂ –æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏\n–¢–∞–∫–∂–µ –≤–∏–±–µ—Ä–∏ —Ä–æ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª–µ –†–æ–ª–∏\n–¢–∫–∂–µ –º–∏ –µ—Å—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ\n–ö–∞–Ω–∞–ª https://t.me/official_programmerchannel\n–ß–∞—Ç https://t.me/official_programmerchat\n–ü–æ–∂–∞–ª—É—Å—Ç–∞ –ø—Ä–æ—á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ !rules\n–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ !commands', color=0xFAA200)
    await channel.send(embed=embed)

@bot.event
async def on_raw_reaction_add(payload):
    if payload.message_id == config.POST_ID:
        channel = bot.get_channel(payload.channel_id)
        message = await channel.fetch_message(payload.message_id)
        member = payload.member
        print(member)

        try:
            emoji = str(payload.emoji)
            role = utils.get(message.guild.roles, id=config.ROLES[emoji])

            if len([i for i in member.roles if i and i.id not in config.EXCROLES]) <= config.MAX_ROLES_PER_USER:
                await member.add_roles(role)
                print('[SUCCESS] User {0.display_name} has been granted with role {1.name}'.format(member, role))
            else:
                await message.remove_reaction(payload.emoji, member)
                print('[ERROR] Too many roles for user {0.display_name}'.format(member))

        except KeyError as e:
            print('[ERROR] KeyError, no role found for ' + emoji)
        except Exception as e:
            print(repr(e))


@bot.event
async def on_raw_reaction_remove(payload):
    channel = bot.get_channel(payload.channel_id)
    message = await channel.fetch_message(payload.message_id)
    user_id = payload.user_id
    member = await (await bot.fetch_guild(payload.guild_id)).fetch_member(payload.user_id)
    print(member, user_id)
    if payload.message_id == config.POST_ID:
        try:
            emoji = str(payload.emoji)
            role = utils.get(message.guild.roles, id=config.ROLES[emoji])

            await member.remove_roles(role)
            print('[SUCCESS] Role {1.name} has been remove for user {0.display_name}'.format(member, role))

        except KeyError as e:
            print('[ERROR] KeyError, no role found for ' + emoji)

        except Exception as e:
            print(repr(e))

@bot.event
async def on_command_error(ctx, error):
    print(error)

    if isinstance(error, commands.MissingPermissions):
        await ctx.send(f"{ctx.author}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!")
    elif isinstance(error, commands.UserInputError):
        await ctx.send(embed=discord.Embed(
            description=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: `{ctx.prefix}{ctx.command.name}` ({ctx.command.brief})\nExample: {ctx.prefix}{ctx.command.usage}"
        ))

@bot.command(name="!clear", brief="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–æ–æ–±—â–µ–Ω–∏–π", usage="clear <amount=10>")
async def clear(ctx, amount: int=10):
    await ctx.channel.purge(limit=amount)
    await ctx.send(f"Was deleted {amount} messages...")

@bot.command(name="!kick", brief="–í—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞", usage="kick <@user> <reason=None>")
@commands.has_permissions(kick_members=True)
async def kick(ctx, member: discord.Member, *, reason=None):
    await ctx.message.delete(delay=1) # –ï—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π

    await member.send(f"–í–∞—Å –∫–∏–∫—É–Ω–∞–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞!") # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±–∏–ª –∫–∏–∫–Ω—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞!")
    await member.kick(reason=reason)

@bot.command(name="!ban", brief="–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", usage="ban <@user> <reason=None>")
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason=None):
    await member.send(f"–¢–µ–±—è –∑–∞–±–∞–Ω–∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!") # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±–∏–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
    await member.ban(reason=reason)

@bot.command(name="!unban", brief="–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", usage="unban <user_id>")
@commands.has_permissions(ban_members=True)
async def unban(ctx, member: discord.Member, *, user_id: int):
    user = await bot.fetch_user(user_id)
    await ctx.guild.unban(user)
    await ctx.send(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –±–∏–ª —Ä–∞–∑–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")

@bot.event
async def on_message(message):
    for word in mat: 
        if word in message.content.lower():
            await message.delete()
            await message.channel.send(f"{message.author.mention}, –∞–π-–∞–π-–∞–π... –ü–ª–æ—Ö–æ, –ø–ª–æ—Ö–æ, —Ç–∞–∫ –Ω–µ–ª—å–∑—è!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.author.mention} –Ω–∞–ø–∏—Å–∞–≤ –º–∞—Ç!")

    if message.content.startswith('!report'):
        channel = bot.get_channel(1008390975460220968)
        await message.channel.send('–†–ï–ü–û–†–¢ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
        await channel.send('–ë–∏–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–µ–ø–æ—Ä—Ç!')        

    if message.content.startswith('!start'):
        await message.channel.send('–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n'
                                   '–í –µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Ç–∏ –º–æ–∂–µ–∂ –æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏\n'
                                   '–¢–∏ –º–æ–∂–µ–∂ –≤–∏–±—Ä–∞—Ç—å —á–∞—Ç –∏ —Ç–∞–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å\n'
                                   '–¢–∞–∫–∂–µ –≤–∏–±–µ—Ä–∏ —Ä–æ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª–∏ –†–æ–ª–∏\n'
                                   '–ü–æ–∂–∞–ª—É—Å—Ç–∞ —Å–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º —Å–µ—Ä–≤–µ—Ä–∞!\n'
                                   '–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ !rules\n'
                                   '–í—Å–µ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ !commands')

    if message.content.startswith('!help'):
        await message.channel.send('–í –µ—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ —Ç–∏ –º–æ–∂–µ–∂ –æ–±—â–∞—Ç—å—Å—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏\n'
                                   '–¢–∏ –º–æ–∂–µ–∂ –≤–∏–±—Ä–∞—Ç—å —á–∞—Ç –∏ —Ç–∞–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å\n'
                                   '–¢–∞–∫–∂–µ –≤–∏–±–µ—Ä–∏ —Ä–æ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª–µ –†–æ–ª–∏\n'
                                   '–ü–æ–∂–∞–ª—É—Å—Ç–∞ —Å–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º —Å–µ—Ä–≤–µ—Ä–∞!\n'
                                   '–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ !rules\n'
                                   '–í—Å–µ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ !commands')
    if message.content.startswith('!commands'):
        await message.channel.send('–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n'
                                   '!start - –°—Ç–∞—Ä—Ç –±–æ—Ç–∞\n'
                                   '!help - –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n'
                                   '!rules - –ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞\n'
                                   '!commands - –í–∏–∑–≤–∞—Ç—å —ç—Ç–æ–µ —Å–æ–±—â–µ–Ω–Ω–∏—è\n'
                                   '!report - –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n'
                                   '!bot - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞\n'
                                   '!usd - –ö—É—Ä—Å –î–æ–ª–ª–∞—Ä–∞\n'
                                   '!eur - –ö—É—Ä—Å –ï–≤—Ä–æ\n'
                                   '!uah - –ö—É—Ä—Å –ì—Ä–∏–≤–Ω–∏\n'
                                   '!rub - –ö—É—Ä—Å –†—É–±–ª—è\n'
                                   '!pln - –ö—É—Ä—Å –ó–ª–æ—Ç–∏—Ö\n'
                                   '!gbp - –ö—É—Ä—Å –§—É–Ω—Ç–∞')

    if message.content.startswith('!rules'):
        await message.channel.send('–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞:\n'
                                   'üö´ –ù–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞\n'
                                   'üö´–°–ø–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω\n'
                                   '–ù–µ —Å–ª–µ–¥—É–≤–∞–Ω–Ω–∏—è –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞ –∫–∞—Ä–∞–µ—Ç—å—Å—è –±–∞–Ω–æ–º –∏–ª–∏ –º—É—Ç–æ–º!\n'
                                   '–ù–µ–∑–Ω–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –≤–∞—Å –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏!\n')     
    if message.content.startswith('!bot'):
        await message.channel.send(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∏—è –±–∏–ª–æ: {date} (GMT+3).\n–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ö–æ—Å—Ç–∏–Ω–≥–∞: {cpu()}%')                                                                   

    if message.content.startswith('!usd'):
        url = 'https://www.currency.me.uk/convert/usd/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/usd/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/usd/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/usd/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/usd/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"USDüíµ\nüá∫üá¶{uah}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"
        await message.channel.send(f"{res}")

    if message.content.startswith('!eur'):  
            url = 'https://www.currency.me.uk/convert/eur/uah'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            uah = soup.find("span", { "class" : "mini ccyrate" }).text

            url = 'https://www.currency.me.uk/convert/eur/rub'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            rub = soup.find("span", { "class" : "mini ccyrate" }).text 

            url = 'https://www.currency.me.uk/convert/eur/usd'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            usd = soup.find("span", { "class" : "mini ccyrate" }).text 

            url = 'https://www.currency.me.uk/convert/eur/gbp'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

            url = 'https://www.currency.me.uk/convert/eur/pln'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            pln = soup.find("span", { "class" : "mini ccyrate" }).text 

            res = f"EURüí∂\nüá∫üá¶{uah}\nüá∑üá∫{rub}\nüá∫üá∏{usd}\nüá¨üáß{gbp}\nüáµüá±{pln}"
            await message.channel.send(f"{res}")
    
    if message.content.startswith('!pln'): 
        url = 'https://www.currency.me.uk/convert/pln/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/pln/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/pln/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/pln/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/pln/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"PLNüáµüá±\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá∫üá¶{uah}\nüá¨üáß{gbp}"  

        await message.channel.send(f"{res}")


    if message.content.startswith('!gbp'): 
        url = 'https://www.currency.me.uk/convert/gbp/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/gbp/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/gbp/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/gbp/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/gbp/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"GBPüí∑\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá∫üá¶{uah}\nüáµüá±{pln}"

        await message.channel.send(f"{res}")

    if message.content.startswith('!rub'): 
        url = 'https://www.currency.me.uk/convert/rub/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/rub/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/rub/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/rub/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/rub/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"RUBüá∑üá∫\nüá∫üá∏{usd}\nüá∫üá¶{uah}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"

        await message.channel.send(f"{res}")

    if message.content.startswith('!uah'): 
        url = 'https://www.currency.me.uk/convert/uah/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/uah/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/uah/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/uah/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/uah/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"UAHüá∫üá¶\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"

        await message.channel.send(f"{res}")

bot.run(config.TOKEN)