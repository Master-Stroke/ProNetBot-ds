import discord
from discord.ext.commands import Context
from discord.ext import commands
import requests
from bs4 import BeautifulSoup as BS
import datetime
import psutil

Year = int(datetime.datetime.now().strftime("%Y"))
Mounth = datetime.datetime.now().strftime("%B")
Dey = int(datetime.datetime.now().strftime("%d"))
Hour = int(datetime.datetime.now().strftime("%H"))
Minute = datetime.datetime.now().strftime("%M")
Dates = [Dey, Hour, Minute, Mounth, Year]
date = f"{Dates[4]}y {Dates[3]} {Dates[0]} {Dates[1]}:{Dates[2]}"

def cpu ():
  cpu_per = int (psutil.cpu_percent (1))
  return cpu_per

class Info(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command()
    async def ping(self, ctx: commands.Context) -> None:
        ping_value = round(self.bot.latency * 1000)

        await ctx.send(
                f"–ü–∏–Ω–≥: `{ping_value}`ms"
        )    
        
    @commands.command(aliases=['bot', 'info'])
    async def _bot(self, ctx: Context):
      channel = ctx.channel or channel
      emb = discord.Embed(
            title=f"–ü—Ä–∏–≤–µ—Ç", description=f"–Ø –º—É–ª—å—Ç–∏—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è IT —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–∏—Å–∫–æ—Ä–¥–∞!\n–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏ `!help`\n\n**–°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**\n[–¢—É—Ç](https://discord.com/invite/yVSSf8B9m8) —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–∞!"
        )  
      ping_value = round(self.bot.latency * 1000)
      servers = len(self.bot.guilds)   
      commands = len(self.bot.commands)   

      emb.add_field(name=f"–ú–æ–π –ø–∏–Ω–≥: ", value=f"`{ping_value}`ms", inline=False),
      emb.add_field(name=f"–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞:", value=f"{servers} —Å–µ—Ä–≤–µ—Ä–∞—Ö", inline=False),
      emb.add_field(name=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: ", value=f"{commands}", inline=False),

      await ctx.send(embed=emb)

    @commands.command(aliases=['monitoring'])
    async def _monitoring(self, ctx: Context):
      channel = ctx.channel or channel
      emb = discord.Embed(
            title=f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞",
        )
        
      ping_value = round(self.bot.latency * 1000)
      servers = len(self.bot.guilds)   
      commands = len(self.bot.commands)   

      emb.add_field(name=f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–∏–ª: ", value=f"{date}", inline=False),
      emb.add_field(name=f"–ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ö–æ—Å—Ç–∏–Ω–≥–∞: ", value=f"{cpu()}%", inline=False),
      emb.add_field(name=f"–ü–∏–Ω–≥: ", value=f"`{ping_value}`ms", inline=False),
      emb.add_field(name=f"–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞:", value=f"{servers} —Å–µ—Ä–≤–µ—Ä–∞—Ö", inline=False),
      emb.add_field(name=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: ", value=f"{commands}", inline=False),
      emb.add_field(name=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ: ", value=f"{psutil.cpu_count()}", inline=False),
      emb.add_field(name=f"–ö–æ–º–ø –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–µ—Ä, –±–∏–ª –∑–∞–ø—É—â–µ–Ω ", value=f"{psutil.boot_time()} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥.", inline=False)

      await ctx.send(embed=emb)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
    @commands.command(aliases=['serverinfo', 'server'])
    async def stats(self, ctx: Context):
     name = str(ctx.guild.name)
     description = str(ctx.guild.description)
     owner = str(ctx.guild.owner)
     id = str(ctx.guild.id)
     mcount = str(ctx.guild.member_count)

     tchcount = len([x for x in ctx.guild.channels if x.type != discord.ChannelType.voice if x.type != discord.ChannelType.category])
     vchcount = len([x for x in ctx.guild.channels if x.type == discord.ChannelType.voice])
     cchcount = len([x for x in ctx.guild.channels if x.type == discord.ChannelType.category])
     rcount = len([x for x in ctx.guild.roles])
     ucount = len([x for x in ctx.guild.members if not x.bot])

     emb = discord.Embed(
         title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {ctx.guild.name}'
     )
     emb.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞:", value=owner, inline=True)
     emb.add_field(name="ID —Å–µ—Ä–≤–µ—Ä–∞:", value=id, inline=False)
     emb.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞:", value=mcount, inline=False)
     emb.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –±–æ—Ç–æ–≤):", value=f'{ucount}', inline=False)
     emb.add_field(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π', value=f'{rcount}', inline=False)
     emb.add_field(name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', value=f'{ctx.guild.created_at.strftime("%Y.%m.%d, %H:%M")}', inline=False)
     emb.add_field(name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤:', value=f'> –¢–µ–∫—Å—Ç–æ–≤—ã—Ö: {tchcount}\n> –ì–æ–ª–æ—Å–æ–≤—ã—Ö: {vchcount}\n> –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {cchcount}',
                  inline=False)
     await ctx.send(embed=emb)

    @commands.command(aliases=['channelinfo', 'channel'])
    async def channelstats(self, ctx, channel: discord.TextChannel = None):

        channel = ctx.channel or channel
        embed = discord.Embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ `{channel.name}`",
            description=f"{'–ö–∞—Ç–µ—Ä–∏–≥–æ—Ä–∏—è: `{}'.format(channel.category.name) if channel.category else '–£ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –Ω–µ—Ç—É –∫–∞—Ç–µ—Ä–∏–≥–æ—Ä–∏–∏!`'}`",
            colour=0xBF8040,
        )

        if channel.slowmode_delay == 0:
            slow_mode = "–û—Ç–∫–ª—é—á–µ–Ω"

        fields = [
            ("–ù–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞", ctx.guild.name, False),
            ("ID –∫–∞–Ω–∞–ª–∞", channel.id, False),
            ("–ü–æ–∑–∏—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–∫–µ", channel.position, False),
            ("–ú–µ–¥–ª–µ–Ω—ã–π —Ä–µ–∂–∏–º", slow_mode, False),
            ("–ö–æ–≥–¥–∞ –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª", channel.created_at, False),
        ]
        for name, value, inline in fields:
            embed.add_field(name=name, value=value, inline=inline)

        await ctx.send(embed=embed)


    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    @commands.command(aliases=['myroles', 'roles'])
    async def _roles(self, ctx, member: discord.Member = None, guild: discord.Guild = None):
        if member == None:
            userPrefix = ctx.message.author
        else:
            userPrefix = member

        member_roles = userPrefix.roles
        member_roles.pop(0)
        member_roles.reverse()
        x = ''
        for i in member_roles:
            element = str(i.id)
            result = f'<@&{element}>'
            if len(member_roles) <= 5:
                x += f'{result}\n'
            else:
                x += f'- {result} -'

        embed = discord.Embed(
            description=f"{userPrefix.mention} —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π:\n\n{x}",
            color=ctx.author.color, )
        await ctx.send(embed=embed)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    @commands.command(aliases=['user', 'userinfo'])
    async def _userinfo(self, ctx, member: discord.Member = None, guild: discord.Guild = None):
        if not member:
            member = ctx.message.author

        t = member.status
        if t == discord.Status.online:
            d = ":green_circle: –í —Å–µ—Ç–∏"
        if t == discord.Status.offline:
            d = ":black_circle: –ù–µ –≤ —Å–µ—Ç–∏"
        if t == discord.Status.idle:
            d = ":crescent_moon: –ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        if t == discord.Status.dnd:
            d = ":no_entry: –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"

        value1 = member.activity

        embed = discord.Embed(
            description=f'**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n'
                        f'\n**–ò–º—è: **{member.display_name}\n'
                        f'**–°—Ç–∞—Ç—É—Å: **{d}\n'
                        f'**–†–æ–ª—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: **{member.top_role.mention}\n'
                        f'**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: **{member.created_at.strftime("%d.%m.%Y")}\n',
            color=ctx.author.color, )
        embed.set_footer(text=f'ID: {member.id}')
        await ctx.send(embed=embed)

    @commands.command(aliases=['usd', 'dollar'])
    async def _usd(_, message):
        url = 'https://www.currency.me.uk/convert/usd/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/usd/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/usd/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/usd/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/usd/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"USDüíµ\nüá∫üá¶{uah}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"
        await message.channel.send(f"{res}")

    @commands.command(aliases=['eur', 'euro'])
    async def _eur(_, message): 
            url = 'https://www.currency.me.uk/convert/eur/uah'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            uah = soup.find("span", { "class" : "mini ccyrate" }).text

            url = 'https://www.currency.me.uk/convert/eur/rub'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            rub = soup.find("span", { "class" : "mini ccyrate" }).text 

            url = 'https://www.currency.me.uk/convert/eur/usd'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            usd = soup.find("span", { "class" : "mini ccyrate" }).text 

            url = 'https://www.currency.me.uk/convert/eur/gbp'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

            url = 'https://www.currency.me.uk/convert/eur/pln'
            r = requests.get(url)
            soup = BS(r.text, 'lxml')
            pln = soup.find("span", { "class" : "mini ccyrate" }).text 

            res = f"EURüí∂\nüá∫üá¶{uah}\nüá∑üá∫{rub}\nüá∫üá∏{usd}\nüá¨üáß{gbp}\nüáµüá±{pln}"
            await message.channel.send(f"{res}")
    
    @commands.command(aliases=['pln', 'zlota'])
    async def _pln(_, message):
        url = 'https://www.currency.me.uk/convert/pln/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/pln/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/pln/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/pln/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/pln/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"PLNüáµüá±\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá∫üá¶{uah}\nüá¨üáß{gbp}"  

        await message.channel.send(f"{res}")


    @commands.command(aliases=['gbp', 'pound'])
    async def _gbp(_, message):
        url = 'https://www.currency.me.uk/convert/gbp/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/gbp/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/gbp/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/gbp/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/gbp/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"GBPüí∑\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá∫üá¶{uah}\nüáµüá±{pln}"

        await message.channel.send(f"{res}")

    @commands.command(aliases=['rub', 'rouble'])
    async def _rub(_, message):
        url = 'https://www.currency.me.uk/convert/rub/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/rub/uah'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        uah = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/rub/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/rub/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/rub/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"RUBüá∑üá∫\nüá∫üá∏{usd}\nüá∫üá¶{uah}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"

        await message.channel.send(f"{res}")

    @commands.command(aliases=['uah', 'hryvnia'])
    async def _uah(_, message):
        url = 'https://www.currency.me.uk/convert/uah/usd'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        usd = soup.find("span", { "class" : "mini ccyrate" }).text

        url = 'https://www.currency.me.uk/convert/uah/rub'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        rub = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/uah/eur'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        eur = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/uah/gbp'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        gbp = soup.find("span", { "class" : "mini ccyrate" }).text 

        url = 'https://www.currency.me.uk/convert/uah/pln'
        r = requests.get(url)
        soup = BS(r.text, 'lxml')
        pln = soup.find("span", { "class" : "mini ccyrate" }).text    

        res = f"UAHüá∫üá¶\nüá∫üá∏{usd}\nüá∑üá∫{rub}\nüá™üá∫{eur}\nüá¨üáß{gbp}\nüáµüá±{pln}"

        await message.channel.send(f"{res}")

    # –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
'''
    @commands.command()
    async def avatar(self, ctx, member: discord.Member = None):
        if member == None:
            userPrefix = ctx.message.author
        else:
            userPrefix = member

        emb = discord.Embed(
            title=f"–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userPrefix.display_name}", color=ctx.author.color)
        emb.set_image(url=str(userPrefix.avatar_url))
        await ctx.send(embed=emb)
'''
